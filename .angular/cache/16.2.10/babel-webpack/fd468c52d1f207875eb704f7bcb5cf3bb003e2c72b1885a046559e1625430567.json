{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class PalindromePipe {\n  transform(value) {\n    let temp = value;\n    let rem = 0;\n    let rev = 0;\n    while (value > 0) {\n      rem = value % 10;\n      rev = rev * 10 + rem;\n      value = value / 10;\n    }\n    if (temp == rev) {\n      return \"palindrome\";\n    } else {\n      return \"no\";\n    }\n  }\n  static #_ = this.ɵfac = function PalindromePipe_Factory(t) {\n    return new (t || PalindromePipe)();\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"palindrome\",\n    type: PalindromePipe,\n    pure: true\n  });\n}","map":{"version":3,"names":["PalindromePipe","transform","value","temp","rem","rev","_","_2","pure"],"sources":["C:\\Users\\NIVEDITAM1\\PracticeProject\\src\\app\\palindrome.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'palindrome'\n})\nexport class PalindromePipe implements PipeTransform {\n\n  transform(value:number): string {\n     let temp=value;\n     let rem=0;\n     let rev=0;\n     while(value>0){\n      rem=value%10;\n      rev=(rev*10)+rem;\n      value=value/10;\n     }\n       if(temp==rev){\n        return \"palindrome\";\n       }\n       else{\n       return \"no\";\n       }\n      \n  }\n\n}\n"],"mappings":";AAKA,OAAM,MAAOA,cAAc;EAEzBC,SAASA,CAACC,KAAY;IACnB,IAAIC,IAAI,GAACD,KAAK;IACd,IAAIE,GAAG,GAAC,CAAC;IACT,IAAIC,GAAG,GAAC,CAAC;IACT,OAAMH,KAAK,GAAC,CAAC,EAAC;MACbE,GAAG,GAACF,KAAK,GAAC,EAAE;MACZG,GAAG,GAAEA,GAAG,GAAC,EAAE,GAAED,GAAG;MAChBF,KAAK,GAACA,KAAK,GAAC,EAAE;;IAEb,IAAGC,IAAI,IAAEE,GAAG,EAAC;MACZ,OAAO,YAAY;KACnB,MACG;MACJ,OAAO,IAAI;;EAGhB;EAAC,QAAAC,CAAA,G;qBAlBUN,cAAc;EAAA;EAAA,QAAAO,EAAA,G;;UAAdP,cAAc;IAAAQ,IAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}