{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CompoundinterestPipe {\n  transform(principal, rateofinterest, time, n) {\n    let compoundinterest = principal * Math.pow(1 + rateofinterest / n, n * time);\n    return compoundinterest;\n  }\n  static #_ = this.ɵfac = function CompoundinterestPipe_Factory(t) {\n    return new (t || CompoundinterestPipe)();\n  };\n  static #_2 = this.ɵpipe = /*@__PURE__*/i0.ɵɵdefinePipe({\n    name: \"compoundinterest\",\n    type: CompoundinterestPipe,\n    pure: true\n  });\n}","map":{"version":3,"names":["CompoundinterestPipe","transform","principal","rateofinterest","time","n","compoundinterest","Math","pow","_","_2","pure"],"sources":["C:\\Users\\NIVEDITAM1\\PracticeProject\\src\\app\\compoundinterest.pipe.ts"],"sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'compoundinterest'\n})\nexport class CompoundinterestPipe implements PipeTransform {\n\n  transform(principal:number,rateofinterest:number,time:number,n:number): number {\n    let compoundinterest=principal*(Math.pow((1+rateofinterest/n),(n*time)))\n    return compoundinterest;\n  }\n\n}\n"],"mappings":";AAKA,OAAM,MAAOA,oBAAoB;EAE/BC,SAASA,CAACC,SAAgB,EAACC,cAAqB,EAACC,IAAW,EAACC,CAAQ;IACnE,IAAIC,gBAAgB,GAACJ,SAAS,GAAEK,IAAI,CAACC,GAAG,CAAE,CAAC,GAACL,cAAc,GAACE,CAAC,EAAGA,CAAC,GAACD,IAAK,CAAE;IACxE,OAAOE,gBAAgB;EACzB;EAAC,QAAAG,CAAA,G;qBALUT,oBAAoB;EAAA;EAAA,QAAAU,EAAA,G;;UAApBV,oBAAoB;IAAAW,IAAA;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}