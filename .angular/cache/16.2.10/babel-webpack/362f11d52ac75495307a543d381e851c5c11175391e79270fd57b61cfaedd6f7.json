{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class TransferService {\n  constructor() {}\n  transferFunds(sourceAccount, targetAccount, amountToTransfer) {\n    if (amountToTransfer == 0 || amountToTransfer < 0 || amountToTransfer > sourceAccount.AccountBalance) {\n      alert(\"amount to tranfer cannot be negative or zero or insufficient balance\");\n    } else {\n      if (sourceAccount.AccountBalance == 0) {\n        alert(\"Balance is insufficient\");\n      } else if (sourceAccount.AccountBalance < 0) {\n        alert(\"Balance cannot be negative\");\n      } else {\n        sourceAccount.AccountBalance -= amountToTransfer;\n        targetAccount.AccountBalance += amountToTransfer;\n        alert(\"amount transferred succesefully\");\n      }\n    }\n  }\n  static #_ = this.ɵfac = function TransferService_Factory(t) {\n    return new (t || TransferService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TransferService,\n    factory: TransferService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["TransferService","constructor","transferFunds","sourceAccount","targetAccount","amountToTransfer","AccountBalance","alert","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\NIVEDITAM1\\PracticeProject\\src\\app\\transfer.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Bank } from './Bank';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransferService {\n\n  constructor() { }\n  source!:Bank;\n  target!:Bank;\n  amtra!:number;\n\n  transferFunds(sourceAccount:Bank ,targetAccount:Bank,amountToTransfer:number){\n\n    if(amountToTransfer==0 || amountToTransfer<0 || amountToTransfer>sourceAccount.AccountBalance){\n      alert(\"amount to tranfer cannot be negative or zero or insufficient balance\")\n    }\n    else{\n      if(sourceAccount.AccountBalance==0){\n        alert(\"Balance is insufficient\");\n      }\n      else if(sourceAccount.AccountBalance<0){\n        alert(\"Balance cannot be negative\");\n      }\n      else{\n        sourceAccount.AccountBalance-=amountToTransfer;\n        targetAccount.AccountBalance+=amountToTransfer;\n        alert(\"amount transferred succesefully\");\n      }\n  \n  \n    }\n    \n  }\n\n}\n"],"mappings":";AAMA,OAAM,MAAOA,eAAe;EAE1BC,YAAA,GAAgB;EAKhBC,aAAaA,CAACC,aAAkB,EAAEC,aAAkB,EAACC,gBAAuB;IAE1E,IAAGA,gBAAgB,IAAE,CAAC,IAAIA,gBAAgB,GAAC,CAAC,IAAIA,gBAAgB,GAACF,aAAa,CAACG,cAAc,EAAC;MAC5FC,KAAK,CAAC,sEAAsE,CAAC;KAC9E,MACG;MACF,IAAGJ,aAAa,CAACG,cAAc,IAAE,CAAC,EAAC;QACjCC,KAAK,CAAC,yBAAyB,CAAC;OACjC,MACI,IAAGJ,aAAa,CAACG,cAAc,GAAC,CAAC,EAAC;QACrCC,KAAK,CAAC,4BAA4B,CAAC;OACpC,MACG;QACFJ,aAAa,CAACG,cAAc,IAAED,gBAAgB;QAC9CD,aAAa,CAACE,cAAc,IAAED,gBAAgB;QAC9CE,KAAK,CAAC,iCAAiC,CAAC;;;EAM9C;EAAC,QAAAC,CAAA,G;qBA5BUR,eAAe;EAAA;EAAA,QAAAS,EAAA,G;WAAfT,eAAe;IAAAU,OAAA,EAAfV,eAAe,CAAAW,IAAA;IAAAC,UAAA,EAFd;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}